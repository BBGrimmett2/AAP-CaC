---
- name: Import Automation Controller Configs
  hosts: all
  # hosts: aap-dev
  gather_facts: false
  vars_files:
    - "/home/rriley/aap/controller/data/projects/_22__cac/filetree_output/current_credential_types.yaml"
  vars:
    # Overwrite for when testing locally
    username: "USERNAME"
    password: "PASSWORD"
    import_controller_host: "IMPORT_CONTROLLER_HOST"
    import_creds: false

    filetree_parent_dir: "/home/{{ ansible_user }}/aap/controller/data/projects"

    cac_files:
      - current_credential_types.yaml
      - current_settings.yaml
      - organizations.yaml
      - credentials.yaml
      - projects.yaml
      - current_execution_environments.yaml
      - inventories.yaml
      - inventory_sources.yaml
      - hosts.yaml
      - job_templates.yaml

    controller_username: "{{ username }}"
    controller_password: "{{ password }}"
    controller_hostname: "{{ import_controller_host }}"
    controller_validate_certs: false

  # pre_tasks:

  #   - name: Find the 'filetree_output' directory
  #     ansible.builtin.find:
  #       paths: "{{ filetree_parent_dir }}"
  #       recurse: true
  #       file_type: directory
  #       patterns: "filetree_output"
  #     register: found_dirs
  #     delegate_to: localhost

  #   - name: Debug;
  #     debug:
  #       msg: "{{ found_dirs }}"

    # - name: Store the first found directory in a variable
    #   ansible.builtin.set_fact:
    #     filetree_output_path: "{{ found_dirs.files[0].path }}"
    #   when: found_dirs.matched > 0

    # - name: Load Vars
    #   ansible.builtin.include_vars:
    #     file: "/home/rriley/aap/controller/data/projects/_22__cac/filetree_output/{{ item }}"
    #   loop: "{{ cac_files }}"

  roles:
    - {role: infra.controller_configuration.credential_types}
    - {role: infra.controller_configuration.settings, when: controller_settings is defined}
    - {role: infra.controller_configuration.organizations, when: controller_organizations is defined}
    - {role: infra.controller_configuration.credentials, when: import_creds and controller_credentials is defined, ignore_errors: true, no_log: false}
    - {role: infra.controller_configuration.projects, when: controller_projects is defined}
    - {role: infra.controller_configuration.execution_environments, when: controller_execution_environments is defined, ignore_errors: true}
    - {role: infra.controller_configuration.inventories, when: controller_inventories is defined}
    - {role: infra.controller_configuration.inventory_sources, when: controller_inventory_sources is defined}
    - {role: infra.controller_configuration.hosts, when: controller_hosts is defined}
    - {role: infra.controller_configuration.job_templates, when: controller_templates is defined}

...
